setwd("D:/Files/Emory/OneDrive - Emory University/Research/Ben_RA/ICA_on_fmriprep/References/Rcpp")
rm(list = ls())
library(Rcpp)
library(RcppArmadillo)
source("0_jngcaFunctions.R")
##########################################################################################
# simulate data from noisyICA setting
set.seed(2023)
simData = SimFMRI123(var.inactive = 0,noisyICA = TRUE, snr=0.4)
xmat = simData$X
smat = simData$S
xData=xmat
n.comp=3
nu = 1
U.list=NULL
whiten = 'eigenvec'
orth.method='svd'
restarts.pbyd = 10
lambda = sqrt(2)/2
irlba = FALSE
eps = 0.000001
maxit.laplace = 500
p = ncol(xData) # Extract the dimensions to initialize the V(0) for "relax_logistic" and "relax_soft" methods. p = number of column
d = n.comp # Extract the components need for V(0)
# Data whiten
xData = scale(xData, center=TRUE, scale=FALSE)
if (d > p) stop('d must be less than or equal to p')
if (whiten=='eigenvec') {
# Use whitener=='eigenvec' so that restarts.dbyd initiates from the span of the first d eigenvectors.
temp = whitener(X = xData,n.comp = p,irlba=irlba)
xData = temp$Z
whitener = temp$whitener
rm(temp)
}  else if (whiten=='sqrtprec') {
est.sigma = cov(xData)  ## Use eigenvalue decomposition rather than SVD.
evd.sigma = svd(est.sigma)
whitener = evd.sigma$u%*%diag(evd.sigma$d^(-1/2))%*%t(evd.sigma$u)
xData = xData%*%whitener
}else {
whitener = diag(p)
}
# Randomly make an input for U(0), by default here used orth.method = "svd"
W.list = U.list
if (is.null(W.list)){
W.list = gen.inits(p=p, d=d, runs = restarts.pbyd, orth.method=orth.method)
} else{
W.list = list(U.list)
}
runs = length(W.list)
# Create a NULL list for storing outcomes
out.list = NULL
sourceCpp("Rcpp_func_sparseICA.cpp")
runs_relax_laplace(xData,W.list,runs,n.comp,nu,lambda,maxit.laplace,eps)
a=W.list[[1]]
b=runs_relax_laplace(xData,W.list,runs,n.comp,nu,lambda,maxit.laplace,eps)
View(a)
View(b)
View(W.list)
sourceCpp("Rcpp_func_sparseICA.cpp")
a=W.list[[1]]
b=runs_relax_laplace(xData,W.list,runs,n.comp,nu,lambda,maxit.laplace,eps)
identical(a,b$myW)
sourceCpp("Rcpp_func_sparseICA.cpp")
a=W.list[[1]]
b=runs_relax_laplace(xData,W.list,runs,n.comp,nu,lambda,maxit.laplace,eps)
c=xData%*%a
identical(c,b$myW)
identical(c,b$newV)
sourceCpp("Rcpp_func_sparseICA.cpp")
sourceCpp("Rcpp_func_sparseICA.cpp")
b=runs_relax_laplace(xData,W.list,runs,n.comp,nu,lambda,maxit.laplace,eps)
rm(list = ls())
source("0_jngcaFunctions.R")
source("0_SparseICA_Rcpp.R")
##########################################################################################
# simulate data from noisyICA setting
set.seed(2023)
simData = SimFMRI123(var.inactive = 0,noisyICA = TRUE, snr=0.4)
xmat = simData$X
smat = simData$S
best_nu=1.24
source("0_SparseICA_Rcpp.R")
my_sparseICA = sparseICA_Rcpp(xData = xmat, n.comp = 3,U.list=NULL,whiten = "eigenvec", restarts.pbyd = 10,lambda = sqrt(2)/2, nu = best_nu,eps = 1e-6,maxit.laplace = 500, converge_plot = T)
par(mfrow=c(1,3))
image(matrix(my_sparseICA$estS[,1],33,33))
image(matrix(my_sparseICA$estS[,2],33,33))
image(matrix(my_sparseICA$estS[,3],33,33))
par(mfrow=c(1,1))
my_sparseICA = sparseICA_Rcpp(xData = xmat, n.comp = 3,U.list=NULL,whiten = "eigenvec", restarts.pbyd = 10,lambda = sqrt(2)/2, nu = best_nu,eps = 1e-6,maxit.laplace = 500, converge_plot = T)
par(mfrow=c(1,3))
image(matrix(my_sparseICA$estS[,1],33,33))
image(matrix(my_sparseICA$estS[,2],33,33))
image(matrix(my_sparseICA$estS[,3],33,33))
par(mfrow=c(1,1))
my_sparseICA = sparseICA_Rcpp(xData = xmat, n.comp = 3,U.list=NULL,whiten = "eigenvec", restarts.pbyd = 10,lambda = sqrt(2)/2, nu = best_nu,eps = 1e-6,maxit.laplace = 500, converge_plot = T)
par(mfrow=c(1,3))
image(matrix(my_sparseICA$estS[,1],33,33))
image(matrix(my_sparseICA$estS[,2],33,33))
image(matrix(my_sparseICA$estS[,3],33,33))
par(mfrow=c(1,1))
rm(list = ls())
source("0_jngcaFunctions.R")
source("0_SparseICA_Rcpp.R")
##########################################################################################
# simulate data from noisyICA setting
set.seed(2023)
simData = SimFMRI123(var.inactive = 0,noisyICA = TRUE, snr=0.4)
xmat = simData$X
smat = simData$S
best_nu=1.24
my_sparseICA = sparseICA_Rcpp(xData = xmat, n.comp = 3,U.list=NULL,whiten = "eigenvec", restarts.pbyd = 10,lambda = sqrt(2)/2, nu = best_nu,eps = 1e-6,maxit.laplace = 500, converge_plot = T)
par(mfrow=c(1,3))
image(matrix(my_sparseICA$estS[,1],33,33))
image(matrix(my_sparseICA$estS[,2],33,33))
image(matrix(my_sparseICA$estS[,3],33,33))
par(mfrow=c(1,1))
my_sparseICA = sparseICA_Rcpp(xData = xmat, n.comp = 3,U.list=NULL,whiten = "eigenvec", restarts.pbyd = 10,lambda = sqrt(2)/2, nu = best_nu,eps = 1e-6,maxit.laplace = 500, converge_plot = T)
par(mfrow=c(1,3))
image(matrix(my_sparseICA$estS[,1],33,33))
image(matrix(my_sparseICA$estS[,2],33,33))
image(matrix(my_sparseICA$estS[,3],33,33))
par(mfrow=c(1,1))
source("0_PCA_SparseICA_Rcpp.R")
best_nu=1.46
source("0_PCA_SparseICA_Rcpp.R")
my_PCA_sparseICA = PCA_sparseICA_Rcpp(xData = xmat, n.comp = 3,U.list=NULL,whiten = "eigenvec", restarts.pbyd = 10, lambda = sqrt(2)/2, nu = best_nu,eps = 1e-6,maxit.laplace = 500, converge_plot = T)
par(mfrow=c(1,3))
image(matrix(my_PCA_sparseICA$estS[,1],33,33))
image(matrix(my_PCA_sparseICA$estS[,2],33,33))
image(matrix(my_PCA_sparseICA$estS[,3],33,33))
par(mfrow=c(1,1))
